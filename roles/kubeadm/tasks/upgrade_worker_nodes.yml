---
#add new repo
- name: Download GPG key for Kubernetes APT repository
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{upgrade_k8s_version}}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring-v{{upgrade_k8s_version}}.gpg
  when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

- name: Add Kubernetes APT repository
  lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring-v{{upgrade_k8s_version}}.gpg] https://pkgs.k8s.io/core:/stable:/v{{upgrade_k8s_version}}/deb/ /"
    create: true
  when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

- name: Update APT repositories
  apt:
    update_cache: yes
  when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

#first we do upgrade on initial worker node
- name: Install new kubeadm version {{upgrade_k8s_packages_version}}
  apt:
    name: kubeadm={{upgrade_k8s_packages_version}}
    state: present
    allow_change_held_packages: true
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Apply kubeadm upgrade
  command: sudo kubeadm upgrade node
  register: kubeadm_upgrade_node
  when: inventory_hostname in groups['worker_nodes'][0]
  any_errors_fatal: true

- ansible.builtin.debug:
    var: kubeadm_upgrade_node
  when: inventory_hostname in groups['worker_nodes'][0]

#drain does cordon also
- name: Drain node before upgrade
  command: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data --force
  delegate_to: "{{ groups['master_nodes'][0] }}"
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Install new kubelet and kubectl {{upgrade_k8s_packages_version}}
  apt:
    name: "{{ item }}={{upgrade_k8s_packages_version}}"
    state: present
    allow_change_held_packages: true
  with_items:
    - kubelet
    - kubectl
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Add hold to kubernetes packages to prevent accidental update
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubectl
    - kubeadm
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Issue daemon-reload to pick up config changes
  ansible.builtin.systemd:
    daemon_reload: yes
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Restart kubelet service
  systemd:
    name: kubelet
    state: restarted
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Uncordon worker node - make it schedulable back again
  command: "kubectl uncordon {{ inventory_hostname }}"
  delegate_to: "{{ groups['master_nodes'][0] }}"
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Wait for upgrade to finish
  ansible.builtin.wait_for:
    timeout: 120
  delegate_to: localhost
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Get node information
  shell: |
    kubectl get nodes -o custom-columns='Name:.metadata.name,InternalIP:.status.addresses[0].address,Ready:.status.conditions[4].status' --no-headers | grep {{ inventory_hostname }}
  register: kubectl_node_info
  delegate_to: "{{ groups['master_nodes'][0] }}"
  when: inventory_hostname in groups['worker_nodes'][0]

- name: Check if node is ready, only then continue to upgrade other worker nodes
  assert:
    that:
      - "'True' in kubectl_node_info.stdout_lines[0].split()[2]"
    fail_msg: "Node is not in a ready state"
  when: inventory_hostname in groups['worker_nodes'][0]
  any_errors_fatal: true

# upgrade other worker nodes
- name: Install new kubeadm version {{upgrade_k8s_packages_version}}
  apt:
    name: kubeadm={{upgrade_k8s_packages_version}}
    state: present
    allow_change_held_packages: true
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Apply kubeadm upgrade node
  command: sudo kubeadm upgrade node
  register: kubeadm_upgrade_node
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']
  any_errors_fatal: true

- ansible.builtin.debug:
    var: kubeadm_upgrade_node
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

#drain does cordon also
- name: Drain node before upgrade
  command: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data --force
  delegate_to: "{{ groups['master_nodes'][0] }}"
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Install new kubelet and kubectl {{upgrade_k8s_packages_version}}
  apt:
    name: "{{ item }}={{upgrade_k8s_packages_version}}"
    state: present
    allow_change_held_packages: true
  with_items:
    - kubelet
    - kubectl
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Add hold to kubernetes packages to prevent accidental update
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubectl
    - kubeadm
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Issue daemon-reload to pick up config changes
  ansible.builtin.systemd:
    daemon_reload: yes
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Restart kubelet service
  systemd:
    name: kubelet
    state: restarted
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

- name: Uncordon worker node - make it schedulable back again
  command: "kubectl uncordon {{ inventory_hostname }}"
  delegate_to: "{{ groups['master_nodes'][0] }}"
  when: inventory_hostname in groups['worker_nodes'][1:] or inventory_hostname in groups['new_worker_nodes']

# #Optional upgrade also cri-o container runtime on worker nodes, to follow new updated kubernetes version
# #First check cri-o version maybe it is latest already - apt-cache policy cri-o
# - name: Set OS and k8s VERSION variables
#   set_fact:
#     OS: "{{ ubuntu_version }}"
#     VERSION: "{{ upgrade_k8s_version_cri_o }}"
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# - name: Add cri-o additional repositories
#   blockinfile:
#     path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ VERSION }}.list"
#     create: yes
#     block: |
#       deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ VERSION }}/{{ OS }}/ /
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# - name: Add GPG keys for CRI-O
#   shell: "curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ VERSION }}/{{ OS }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# - name: Add GPG keys for libcontainers
#   shell: "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# - name: Update apt repositories
#   apt:
#     update_cache: yes
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# #The cri-tools contain crictl, a CLI utility to interact with the containers created by the container runtime
# - name: Install cri-o, cri-o-runc, and cri-tools
#   apt:
#     name: "{{ item }}"
#     state: present
#   loop:
#     - "cri-o={{ upgrade_cri_o_version }}"
#     - "cri-o-runc"
#     - "cri-tools"
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']

# - name: Reload systemd configurations
#   systemd:
#     name: systemd-journald
#     state: restarted
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']
#   run_once: true

# - name: Restart cri-o service after update
#   systemd:
#     name: crio
#     enabled: yes
#     state: restarted
#   when: inventory_hostname in groups['worker_nodes'] or inventory_hostname in groups['new_worker_nodes']
